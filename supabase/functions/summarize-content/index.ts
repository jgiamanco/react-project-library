import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { CohereClient } from "npm:cohere-ai@7.17.1";

const COHERE_API_KEY = Deno.env.get("COHERE_API_KEY");

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  if (!COHERE_API_KEY) {
    console.error("COHERE_API_KEY is not set in Supabase Secrets.");
    return new Response(
      JSON.stringify({ error: "Cohere API key is not configured on the server." }),
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  }

  try {
    const { text } = await req.json();

    if (!text || typeof text !== "string" || text.trim().length === 0) {
      return new Response(
        JSON.stringify({ error: "Invalid or empty text input" }),
        {
          status: 400,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    const cohere = new CohereClient({
      token: COHERE_API_KEY,
    });

    // Prepare chatHistory with system message
    const chatHistory = [
      {
        role: "system",
        message: "You are a helpful assistant that summarizes text concisely.",
      },
    ];

    // Pass the input text as the required 'message' parameter
    const response = await cohere.chat({
      model: "command-xlarge-nightly",
      message: text,
      chatHistory: chatHistory,
      max_tokens: 200,
      temperature: 0.3,
      stop_sequences: ["\n"],
    });

    const summary = response.choices?.[0]?.message?.content?.trim();

    if (!summary) {
      return new Response(
        JSON.stringify({ error: "No summary generated by Cohere chat API" }),
        {
          status: 500,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    return new Response(
      JSON.stringify({ summary }),
      {
        status: 200,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  } catch (error) {
    console.error("Edge Function Error:", error);
    return new Response(
      JSON.stringify({ error: error.message || "An unexpected error occurred." }),
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  }
});